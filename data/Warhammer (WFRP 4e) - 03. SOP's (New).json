{
    "entries": {
        "0": {
            "uid": 0,
            "key": [
                "SOP: Narrative Action Resolution"
            ],
            "keysecondary": [],
            "comment": "SOP-NARRATIVE-001: Narrative Action Resolution",
            "content": "### **`SOP-NARRATIVE-001: Narrative Action Resolution`**\n\n*   **4.0 Procedural Steps:**\n    1.  **Action Assessment:** The GM assesses the declared action.\n    2.  **Determine Uncertainty:** If the outcome is certain, it succeeds automatically. If not, proceed to Step 3.\n    3.  **Determine Test Type:** The GM determines if a Simple, Dramatic, Opposed, or Extended Test is needed.\n    4.  **Resolve Simple Test:** The GM determines the Skill/Difficulty, calls the `RollTheDice` tool, and narrates the binary outcome. This SOP terminates.\n    5.  **Resolve Dramatic or Opposed Test:**\n        *   The GM determines the appropriate Skill/Characteristic and Difficulty.\n        *   Call the `RollTheDice` tool.\n        *   The outcome is determined by the final Success Level (SL).\n        *   The GM generates a `Report: Action Resolution Outcome (WFRP)` and incorporates it into the next `Report: Story Narrative Response`. This SOP terminates.\n",
            "constant": false,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": true,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 3,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 0,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 20,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "1": {
            "uid": 1,
            "key": [
                "SOP-COMBAT-000: Combat Encounter Resolution",
                "initiative",
                "surprise",
                "ambush",
                "melee attack",
                "ranged attack"
            ],
            "keysecondary": [
                "RollTheDice"
            ],
            "comment": "SOP-COMBAT-000: Combat Encounter Resolution",
            "content": "### **`SOP-COMBAT-000: Combat Encounter Resolution`**\n\n*   **1.0 Purpose:** To define the complete, end-to-end procedure for managing a combat encounter. This SOP governs the flow from the moment combat begins until it concludes, acting as the master process for all other combat-related SOPs.\n\n*   **2.0 Trigger:** The GM determines that combat is unavoidable.\n\n*   **3.0 Procedural Steps:**\n\n    *   **Step 1: Initiation**\n        *   The GM executes `SOP-COMBAT-003: Combat Initiation`.\n        *   **Output:** The `Report: Combat Initiation` is generated and presented to the player.\n\n    *   **Step 2: The Opening Phase**\n        *   **GM Directive:** Before starting Round 1, you **must** sequentially evaluate the following sub-steps. You will collect the results of any triggered effects to be consolidated into a single report.\n        *   **A. Surprise Adjudication:**\n            *   **Check:** Is any combatant `Surprised`?\n            *   **Action:** If yes, note the Surprise Attacks to be resolved.\n        *   **B. Psychology Adjudication:**\n            *   **Check:** Does any combatant have a Psychology trait triggered by this encounter (e.g., `Afraid`, `Hatred`, `Terror`)?\n            *   **Action:** If yes, execute the relevant `SOP-PSYCH-*` for each affected combatant and note the results.\n        *   **C. Priority Action Adjudication:**\n            *   **Check:** Does the Player Character possess a Talent that can be used before Round 1 (e.g., `Fast Shot`)?\n            *   **Action:** If yes, you **must ask the player if they wish to use it.** If they agree, resolve the action and note the result.\n        *   **Execution & Reporting:**\n            *   **If no effects were noted** in sub-steps A, B, or C, proceed directly to Step 3.\n            *   **If one or more effects were noted,** consolidate **all of them** into a single `Report: Combat - Opening Phase` and post it. All rolls required must use the `RollTheDice` tool.\n        *   **Output:** `Report: Combat - Opening Phase` (if applicable).\n\n    *   **Step 3: Round Begins**\n        *   The GM announces the start of a new round (e.g., \"Round 1 begins!\").\n        *   Any other effects that trigger at the \"start of the round\" are resolved.\n\n    *   **Step 4: Turn Cycle (Loop)**\n        *   The GM proceeds through the initiative order established in Step 1. For each combatant whose turn it is, the GM executes the turn sequence as defined in the `Guideline: Game State & Flow Management`.\n\n    *   **Step 5: End of Round**\n        *   Once all combatants have completed their turn, the GM checks if the combat has concluded.\n        *   **If combat continues:** The GM updates the duration of all persistent environmental effects, removing any that have expired. The GM then generates a `Report: Combat Round Summary` and returns to Step 3 to begin the next round.\n        *   **If combat has ended:** Proceed to Step 6.\n\n    *   **Step 6: Combat Conclusion**\n        *   The GM generates a final `Report: Combat End`.\n        *   The game state transitions back to Narrative Mode. This SOP terminates.\n\n*   **4.0 Cross-References:**\n    *   `Guideline: Game State & Flow Management`\n    *   All `SOP-COMBAT-*`, `SOP-PSYCH-*` procedures.\n    *   All Combat-related Reports.\n    *   `Tool: RollTheDice`\n\n---",
            "constant": false,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": true,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 3,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 5,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 3,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "2": {
            "uid": 2,
            "key": [
                "SOP-COMBAT-003: Combat Initiation",
                "initiative",
                "surprise",
                "ambush"
            ],
            "keysecondary": [
                "RollTheDice"
            ],
            "comment": "SOP-COMBAT-003: Combat Initiation",
            "content": "### **`SOP-COMBAT-003: Combat Initiation`**\n\n*   **1.0 Purpose:** To establish the initial state of a combat encounter. This procedure handles the transition from narrative time to structured time by resolving preliminary rolls, posting combatant data, establishing the final turn order, and defining the tactical environment.\n\n*   **2.0 Trigger:** This SOP is executed as Step 1 of `SOP-COMBAT-000: Combat Encounter Resolution`.\n\n*   **3.0 Required Inputs:**\n    *   A list of all combatants involved.\n    *   The Player Character Sheet(s).\n    *   `Tool: RollTheDice`.\n    *   `campaign_config` (for initiative rules).\n\n*   **4.0 Procedural Steps:**\n\n    1.  **Step 1: Trigger Confirmation:** The GM confirms that the conditions for initiating combat have been met.\n    2.  **Step 2: Resolve Surprise:** If the situation warrants it, the GM calls the `RollTheDice` tool to resolve the Opposed Stealth vs. Perception Test. The results are noted.\n    3.  **Step 3: Determine Initiative Scores:** The GM consults the `campaign_config` to determine the method for calculating initiative.\n        *   **If the `roll_for_initiative` optional rule is active:** The GM calls the `RollTheDice` tool for each combatant. The final score is calculated based on the roll and relevant stats as defined by the rule.\n        *   **If the optional rule is not active (Default Rule):** Each combatant's Initiative Score is their base Initiative Characteristic. No roll is made.\n    4.  **Step 4: Post Combatant Data:** After all preliminary rolls are complete, the GM now generates and **posts the `Bestiary Entry` report for each non-player combatant who does not have a pre-existing, formal Character Sheet.** This applies to hostiles, allies, and neutral parties alike.\n    5.  **Step 5: Finalize and Report:** With all data posted, the GM performs the final calculations:\n        *   **A. Apply Surprise:** Characters who failed the test in Step 2 gain the `Surprised` Condition.\n        *   **B. Establish Initiative Order:** The turn order is established from highest to lowest based on the Initiative Scores determined in Step 3. Ties are broken by the agreed-upon tie-breaker stat (typically Agility).\n        *   **C. Define Battlefield:** The GM provides a brief, clear description of the tactical environment.\n        *   **D. Generate Report:** The GM consolidates the Initiative Order and Tactical Setup into the formal `Report: Combat Initiation` and presents it to the player.\n\n*   **5.0 Expected Outputs:**\n    *   One or more `Bestiary Entry` reports posted in the chat context.\n    *   A populated `Report: Combat Initiation` that officially begins the encounter for the player.\n\n*   **6.0 Cross-References:**\n    *   `SOP-COMBAT-000: Combat Encounter Resolution`\n    *   `Report: Bestiary Entry`\n    *   `Report: Combat Initiation`\n    *   `Tool: RollTheDice`\n\n*   **7.0 Best Practices:**\n    *   **7.1 Differentiated Naming:** When an encounter features multiple creatures of the same type, avoid simple numerical identifiers (e.g., \"Goblin 1\"). Instead, assign a brief, descriptive adjective or feature to create a unique moniker. This enhances narrative flavor and makes targets easier to track.\n        *   **Source of Descriptors:** Appearance (Grubby, Tall, One-Eyed), Equipment (Rusty Helm, Broken Sword, Filthy Rag), or Demeanor (Sniveling, Cackling, Leering).\n        *   **Example:** Instead of \"3 Goblins,\" the combatants become: \"Goblin with the Pointy Stick,\" \"Grubby Goblin,\" and \"Cackling Goblin.\"\n",
            "constant": false,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": true,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 3,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 5,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 6,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "3": {
            "uid": 3,
            "key": [
                "SOP-COMBAT-001: Melee Attack Action",
                "Melee Attack"
            ],
            "keysecondary": [
                "RollTheDice"
            ],
            "comment": "SOP-COMBAT-001: Melee Attack Action",
            "content": "### **`SOP-COMBAT-001: Melee Attack Action`**\n\n*   **1.0 Purpose:** To resolve a Melee Attack by using the core Opposed Test procedure and then interpreting the results within a combat context (calculating damage, applying wounds, and adjusting Advantage).\n\n*   **2.0 Trigger:** A combatant declares a Melee Attack.\n\n*   **3.0 Procedural Steps:**\n\n    1.  **Execute Opposed Test:** The system calls **`SOP-CORE-001: Opposed Test Resolution`**, providing the Attacker's Melee skill and the Defender's relevant defensive skill (Melee or Dodge).\n    2.  **Receive & Interpret Results:** The system receives the data object from `SOP-CORE-001`. It now interprets these raw results:\n        *   **If the Attacker won:** Proceed to Step 3.\n        *   **If the Defender won:** The attack is parried or dodged. The Defender gains +1 Advantage. Proceed to Step 5.\n        *   **If a Fumble occurred:** The effects of the Fumble (as determined by the sub-routine) are applied.\n    3.  **Resolve Critical Hit (If Applicable):** If the results data confirms the Attacker scored a winning Critical, the system now executes **`SOP-INJURY-001: Critical Wound Resolution`**.\n    4.  **Calculate Damage & Advantage (If Attack Hits):**\n        *   The Hit Location is determined by reversing the Attacker's successful roll.\n        *   Final damage is calculated based on the weapon, the winning SL, and the target's reductions.\n        *   The Attacker gains +1 Advantage. The Defender loses any Advantage they possessed.\n    5.  **Generate Final Report:** All interpreted outcomes—the contest result, damage, Conditions, Fumble effects, Critical Wound details, and Advantage changes—are consolidated into a single, final **`Report: Action Resolution Outcome (WFRP)`**.\n\n*   **4.0 Expected Outputs:**\n    *   A single, comprehensive `Report: Action Resolution Outcome (WFRP)`.\n\n*   **5.0 Cross-References:**\n    *   `SOP-CORE-001: Opposed Test Resolution`\n    *   `SOP-INJURY-001: Critical Wound Resolution`\n    *   `Report: Action Resolution Outcome (WFRP)`",
            "constant": false,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": true,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 3,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 5,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 4,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "4": {
            "uid": 4,
            "key": [
                "SOP: Ranged Attack Action",
                "Ranged Attack"
            ],
            "keysecondary": [
                "RollTheDice"
            ],
            "comment": "SOP-COMBAT-002: Ranged Attack Action",
            "content": "### **`SOP-COMBAT-002: Ranged Attack Action`**\n\n*   **1.0 Purpose:** To define the step-by-step process for resolving a standard Ranged Attack, including ammunition tracking, Advantage adjustment, and the resolution of any resulting Fumbles or Critical Wounds.\n\n*   **2.0 Trigger:** A combatant declares they are using their Action to perform a Ranged Attack.\n\n*   **3.0 Procedural Steps:**\n\n    1.  **Step 1: Initiate Standard Test**\n        *   The GM determines the final target number by applying all relevant modifiers (range, cover, aiming, size, etc.) to the attacker's Ballistic Skill (BS).\n        *   The GM calls the `RollTheDice` tool for the Ranged Test.\n    2.  **Step 2: Determine Initial Outcome**\n        *   The system evaluates the result of the test to determine success or failure and the final Success Level (SL).\n        *   It checks if the roll triggers a Fumble or a Critical Hit based on the rules in `Cheat Sheet: Core Tests`.\n\n    3.  **Step 3: Resolve Conditional Rolls (Fumble/Critical)**\n        *   **If a Fumble is triggered:** The GM immediately calls the `RollTheDice` tool to roll on the **Ranged Fumble Table**.\n        *   **If a Critical Wound is triggered:** The GM determines the Hit Location from the successful attack roll. Then, the GM immediately calls the `RollTheDice` tool to roll on the appropriate Critical Wound Table, executing `SOP-INJURY-001`.\n\n    4.  **Step 4: Update Character State**\n        *   **Ammunition:** The attacker's ammunition count for the weapon used is reduced by 1.\n        *   **Advantage:** If the attack was a success, the attacker gains +1 Advantage. The defender, having been hit, loses any Advantage they possessed.\n\n    5.  **Step 5: Consolidate and Report**\n        *   The system gathers the results from all preceding steps.\n        *   It calculates the final damage, applies all effects, and updates character states.\n        *   All of this information is then compiled into a *single, final* **`Report: Action Resolution Outcome (WFRP)`**.\n\n*   **4.0 Expected Outputs:**\n    *   One or more `RollTheDice` tool calls, visible in the chat log.\n    *   A single, comprehensive `Report: Action Resolution Outcome (WFRP)` that summarizes the entire action sequence.\n\n*   **5.0 Cross-References:**\n    *   `SOP-INJURY-001: Critical Wound Resolution`\n    *   `Cheat Sheet: Core Tests`\n    *   `Report: Action Resolution Outcome (WFRP)`\n```\n",
            "constant": false,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": true,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 3,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 5,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 5,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "5": {
            "uid": 5,
            "key": [
                "SOP-COMBAT-004: Charge Action",
                "charge"
            ],
            "keysecondary": [],
            "comment": "SOP-COMBAT-004: Charge Action",
            "content": "### **`SOP-COMBAT-004: Charge Action`**\n\n*   **1.0 Purpose:** To resolve a declared Charge, which combines a special Move with a mandatory Melee Attack Action.\n\n*   **2.0 Trigger:** A character who is not currently Engaged declares they are using their turn to Charge an opponent.\n\n*   **3.0 Required Inputs:**\n    *   Character's Character Sheet (for Movement values, Melee Skill, Weapon stats, current Advantage).\n    *   Target's Character Sheet.\n    *   Current Game State (to confirm the character is not Engaged and the target is reachable).\n\n*   **4.0 Procedural Steps:**\n    1.  **Action Validation:**\n        *   Confirm the charging character is not currently Engaged.\n        *   Confirm the target is within the character's maximum **Run** distance.\n        *   If either condition is not met, the Charge action is invalid. The GM will inform the player. This SOP terminates.\n    2.  **Movement Resolution:**\n        *   The character moves into engagement with the target.\n        *   Compare the distance moved to the character's standard **Walk** distance.\n        *   If `Distance Moved > Walk Distance`, the character gains **+1 Advantage**.\n    3.  **Melee Attack Resolution:**\n        *   The character's Action for the turn **must** be a Melee Attack against the target of the charge.\n        *   This attack is resolved by executing the `SOP-COMBAT-001: Melee Attack Action` in its entirety. The Advantage gained in the previous step is applied to this attack's test.\n    4.  **Report Generation:** The final report for this action is the one generated by the `SOP-COMBAT-001` at the end of its process. No separate report is created for the Charge itself; it is a modifier and prerequisite for the attack.\n\n*   **5.0 Expected Outputs:**\n    *   The character is now Engaged with the target.\n    *   The character may have gained +1 Advantage.\n    *   The final output is the `Report: Action Resolution Outcome (WFRP)` generated by the subsequent Melee Attack SOP.\n\n*   **6.0 Cross-References:**\n    *   `SOP-COMBAT-001: Melee Attack Action`\n    *   `Cheat Sheet: Combat & Movement`\n    *   `Cheat Sheet: Advantage`\n    *   `Report: Action Resolution Outcome (WFRP)`\n    *   `Tool: RollTheDice`\n",
            "constant": false,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": true,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 3,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 5,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 7,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "6": {
            "uid": 6,
            "key": [
                "SOP: Spellcasting Action",
                "cast"
            ],
            "keysecondary": [
                "RollTheDice"
            ],
            "comment": "SOP-MAGIC-001: Spellcasting Action",
            "content": "### **`SOP-MAGIC-001: Spellcasting Action`**\n\n*   **1.0 Purpose:** To resolve a spellcasting attempt, handling channelling, the casting test, potential miscasts, and the creation of any persistent area effects.\n\n*   **2.0 Trigger:** A combatant declares they are using their Action to cast a spell.\n\n*   **3.0 Procedural Steps:**\n\n    1.  **Declare Spell and Overcasting:** The caster declares the spell they are casting and if they intend to use any Overcasting options.\n    2.  **Channelling Test:** The caster makes a Channelling Test. The SL from this test is added to the subsequent Casting Test.\n    3.  **Casting Test:** The caster makes a Casting Test. The final SL is the sum of the Channelling SL and the Casting SL.\n    4.  **Determine Outcome:**\n        *   **If SL ≥ CN:** The spell is successfully cast. Proceed to Step 6.\n        *   **If SL < CN:** The spell fails. This SOP terminates.\n    5.  **Resolve Miscast (If Applicable):** If the Casting Test roll was a double (or other trigger), a Miscast occurs. The GM rolls on the appropriate Miscast table (`Major` or `Minor`) and applies the effects.\n    6.  **Resolve Spell Effects:** The effects of the spell are resolved as per its description.\n    7.  **Track Persistent Effects (If Applicable):** If the spell creates a persistent area of effect (AOE), the GM records its location, dimensions, and duration in the master combat state tracker.\n    8.  **Generate Report:** The outcome is presented in the appropriate report (`Report: Spellcasting Outcome` or `Report: Action Resolution Outcome`).\n\n*   **4.0 Expected Outputs:**\n    *   A report detailing the success or failure of the spell, including any Miscast effects.\n    *   An update to the combat state if a persistent AOE was created.\n\n*   **5.0 Cross-References:**\n    *   `Report: Spellcasting Outcome (WFRP)`\n    *   `Reference: Major Miscast Table`\n    *   `Reference: Minor Miscast Table`\n```\n",
            "constant": false,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": true,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 3,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 5,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 9,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "7": {
            "uid": 7,
            "key": [
                "SOP: Prayer Action",
                "prayer"
            ],
            "keysecondary": [
                "RollTheDice"
            ],
            "comment": "SOP-MAGIC-002: Prayer Action",
            "content": "### **`SOP-MAGIC-002: Prayer Action`**\n\n*   **1.0 Purpose:** To resolve a declared prayer attempt, from the initial petition to the final divine intervention or censure.\n\n*   **2.0 Trigger:** A character with the appropriate religious Talent (e.g., `Bless`, `Invoke`) declares they are performing a prayer from their list of known blessings or miracles as their Action.\n\n*   **3.0 Required Inputs:**\n    *   Character's Character Sheet (for Pray Skill, Willpower, current Sin Points, Fortune, Resilience).\n    *   The specific Prayer being performed (for its Miracle Number (MN), Range, Duration, and Effects).\n    *   The character's standing with their deity (GM's discretion, based on recent actions).\n\n*   **4.0 Procedural Steps:**\n    1.  **Step 1: Prayer Test:** The Caster makes a **Pray Test**. The difficulty is determined by the GM based on the situation, but is typically **Challenging (+0)**.\n    2.  **Step 2: Outcome Determination & Player Intervention:** Compare the final SL of the Pray Test to the prayer's Miracle Number (MN).\n    3.  **Step 3: Failure Path:**\n        *   If SL < MN, the prayer fails.\n        *   **Player Intervention Check:** The GM must ask if the Caster wishes to spend a **Fortune Point** to reroll or a **Resilience Point** to automatically succeed. If so, return to Step 1 and re-evaluate the outcome.\n        *   If no intervention occurs, the character gains **1 Sin Point**.\n        *   **Wrath Check:** The GM now checks if the d100 roll was a Fumble (a failed roll ending in a double) **OR** if the character's new Sin Point total is 3 or more. If either is true, the character has invoked the **Wrath of the Gods**. Proceed to Step 5 (Wrath of the Gods).\n        *   If no Wrath is invoked, the prayer simply fails. Proceed to Step 6 (Report Generation).\n    4.  **Step 4: Success Path:**\n        *   If SL >= MN, the prayer is successfully answered.\n        *   Resolve the prayer's effects (healing, smiting, blessing, etc.) as described in its entry.\n        *   Check if the d100 roll was a double. If YES, this is a **Critical Prayer (Divine Favour)**. The character may remove all their current Sin Points. Proceed to Step 6 (Report Generation).\n    5.  **Step 5: Wrath of the Gods (Conditional):**\n        *   If Wrath was triggered in Step 3, roll on the **`wrath_of_the_gods_table.json`**.\n        *   Resolve the effects of the divine punishment on the character and their surroundings.\n        *   The character's Sin Points are reset to 0 after the punishment is resolved.\n    6.  **Step 6: Report Generation:** Consolidate all outcomes (prayer effects, Wrath results, Sin Point changes, narrative description) into a single, comprehensive `Report: Prayer Outcome (WFRP)`.\n\n*   **5.0 Expected Outputs:**\n    *   A single `Report: Prayer Outcome (WFRP)`.\n    *   Updated game state (Wounds, Conditions, Sin Points) based on the prayer's or the Wrath's effects.\n\n*   **6.0 Cross-References:**\n    *   `Reference: Blessings of the Old World`\n    *   `Reference: Miracles of the Old World`\n    *   `Cheat Sheet: Core Tests`\n    *   `Cheat Sheet: Meta-Currencies`\n    *   `Report: Prayer Outcome (WFRP)`\n    *   `Tool: RollTheDice`\n",
            "constant": false,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": true,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 3,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 5,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 10,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "8": {
            "uid": 8,
            "key": [
                "SOP: Prayer Action",
                "prayer",
                "dispel"
            ],
            "keysecondary": [
                "RollTheDice"
            ],
            "comment": "SOP-MAGIC-003: Dispelling a Spell",
            "content": "### **`SOP-MAGIC-003: Dispelling a Spell`**\n\n*   **1.0 Purpose:** To define the step-by-step procedure for resolving a declared attempt to dispel magic, whether it is an incoming spell or a persistent effect.\n\n*   **2.0 Trigger:** A character with the appropriate magic talent declares they are using their Action to Dispel.\n\n*   **3.0 Required Inputs:**\n    *   Caster's Character Sheet (for Language (Magick) Skill, Willpower Bonus, Fortune, Resilience).\n    *   The spell being targeted for dispelling (for its original caster's skill, its Casting Number (CN), and its current state).\n\n*   **4.0 Procedural Steps:**\n\n    1.  **Step 1: Identify Dispel Type:** The GM determines if the target spell is **Incoming** (currently being cast) or **Persistent** (an ongoing effect).\n\n    2.  **Step 2: Path A - Dispelling an Incoming Spell**\n        *   **A. Validate Target:** The spell must be targeting the caster, an ally, or a point the caster can see within a number of yards equal to their Willpower Bonus. If not, the attempt fails.\n        *   **B. Initiate Opposed Test:** The caster makes an **Opposed Language (Magick) Test** against the original spellcaster.\n            *   **Tool Call Example:** `print(RollTheDice(actor=\"[Dispeller Name]\", action=\"Opposed Test\", target=\"[Original Caster Name]\", type=\"Dispelling Attempt\", formula=\"1d100\", reason=\"[Dispeller] attempts to unravel [Original Caster]'s spell.\"))`\n        *   **C. Resolve Outcome:**\n            *   **If the dispelling caster wins:** The incoming spell is negated and has no effect. Proceed to Step 4.\n            *   **If the original caster wins:** The spell is successfully cast. The final SL of the spell is determined by the result of this Opposed Test, not the original casting roll.\n        *   **D. Player Intervention Check:** Before finalizing a failed dispel, the GM must ask if the dispelling caster wishes to spend a **Fortune Point** to reroll or a **Resilience Point** to automatically win. If so, return to Step 2B and re-evaluate the outcome.\n        *   **E. Limitation:** A character may only attempt to Dispel one incoming spell per Round. Proceed to Step 4.\n\n    3.  **Step 3: Path B - Dispelling a Persistent Spell**\n        *   **A. Initiate Extended Test:** The caster begins an **Extended Language (Magick) Test**. The Target Number for this test is the original Casting Number (CN) of the persistent spell.\n        *   **B. Accumulate Success:** The caster uses their Action each round to make a Language (Magick) Test, adding the SL to their running total. Each roll can be subject to player intervention with meta-currencies. Multiple casters can contribute to this total simultaneously.\n        *   **C. Resolve Outcome:** When the accumulated SL is equal to or greater than the spell's CN, the persistent effect is immediately dispelled.\n\n    4.  **Step 4: Report Generation:** The GM consolidates the outcome into a `Report: Action Resolution Outcome (WFRP)`, detailing the success or failure of the dispel attempt and any resulting changes to the game state.\n\n*   **5.0 Expected Outputs:**\n    *   A single `Report: Action Resolution Outcome (WFRP)`.\n    *   An updated game state (e.g., a spell being negated or a persistent effect ending).\n\n*   **6.0 Cross-References:**\n    *   `Cheat Sheet: Spellcasting Modifiers & Rules`\n    *   `Cheat Sheet: Core Tests`\n    *   `Cheat Sheet: Meta-Currencies`\n    *   `Report: Action Resolution Outcome (WFRP)`\n    *   `Tool: RollTheDice`\n",
            "constant": false,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": true,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 3,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 5,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 11,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "9": {
            "uid": 9,
            "key": [
                "SOP: Psychology Test Resolution (Terror)",
                "psychology",
                "terror"
            ],
            "keysecondary": [
                "RollTheDice"
            ],
            "comment": "SOP-PSYCH-001: Psychology Test (Terror)",
            "content": "### **`SOP-PSYCH-001: Psychology Test Resolution (Terror)`**\n\n*   **1.0 Purpose:** To resolve the effects of a character encountering a source of Terror for the first time.\n\n*   **2.0 Trigger:** A character encounters a creature or phenomenon with the `Terror (Rating)` trait for the very first time. The GM calls for the test.\n\n*   **3.0 Required Inputs:**\n    *   Character's Character Sheet (for Cool skill, Resolve points).\n    *   Source of Terror (for its `Terror Rating`).\n    *   Current Game State (to confirm this is the *first* encounter with this specific source of Terror for this character).\n\n*   **4.0 Procedural Steps:**\n    1.  **Step 1: Validation:** Confirm this is the character's first time facing this source of Terror. If not, this SOP is invalid; the creature causes `Fear` instead, which is handled by `SOP-PSYCH-002`.\n    2.  **Step 2: Player Intervention Check:** Before initiating the test, the GM must ask if the player wishes to spend one **Resolve Point** to ignore the effects of Psychology for this round. If they do, this SOP terminates for this character for this round.\n    3.  **Step 3: Test Initiation:** Initiate a **Cool Test**. The difficulty is set by the GM based on the situation, typically **Challenging (+0)**.\n        *   **Tool Call Example:** `print(RollTheDice(actor=\"[Character Name]\", action=\"Psychology Test\", target=\"[Source of Terror]\", type=\"Terror\", formula=\"1d100\", reason=\"Resisting the terrifying presence of the [Source].\"))`\n    4.  **Step 4: Test Resolution:** Resolve the Cool Test according to `Cheat Sheet: Core Tests`. Determine success or failure and the final Success Level (SL).\n    5.  **Step 5: Success Path:**\n        *   If the test is successful, the character withstands the initial, overwhelming shock. They do not gain any `Broken` Conditions from this test. Proceed to Step 7.\n    6.  **Step 6: Failure Path:**\n        *   If the test fails, the character is overwhelmed by abject terror.\n        *   Calculate the number of `Broken` Conditions gained.\n            *   **Formula:** `Broken Conditions = Terror Rating + |SL of failure|`\n        *   Apply the calculated number of `Broken` Conditions to the character. This immediately causes them to lose all Advantage. Proceed to Step 7.\n    7.  **Step 7: Aftermath Adjudication:** After this one-time test is resolved (regardless of success or failure), the source of Terror no longer causes a Terror test for this character. For the remainder of this encounter and all future encounters, it now causes **Fear (Rating)** equal to its original Terror Rating.\n    8.  **Step 8: Report Generation:** Consolidate all outcomes (Conditions gained, narrative description of the character's reaction, the transition from Terror to Fear) into a single, comprehensive `Report: Psychology Test Outcome (WFRP)`.\n\n*   **5.0 Expected Outputs:**\n    *   A single `Report: Psychology Test Outcome (WFRP)`.\n    *   Updated Character Sheet values (Conditions, Advantage).\n    *   An updated game state flag indicating the character is now subject to `Fear` from this source, not `Terror`.\n\n*   **6.0 Cross-References:**\n    *   `SOP-PSYCH-002: Psychology Test Resolution (Fear)`\n    *   `Cheat Sheet: Psychology`\n    *   `Cheat Sheet: Conditions`\n    *   `Cheat Sheet: Core Tests`\n    *   `Cheat Sheet: Meta-Currencies`\n    *   `Report: Psychology Test Outcome (WFRP)`\n    *   `Tool: RollTheDice`\n",
            "constant": false,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": true,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 3,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 5,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 17,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "10": {
            "uid": 10,
            "key": [
                "SOP: Psychology Test Resolution (Fear)",
                "psychology",
                "fear"
            ],
            "keysecondary": [
                "RollTheDice"
            ],
            "comment": "SOP-PSYCH-002: Psychology Test (Fear)",
            "content": "### **`SOP-PSYCH-002: Psychology Test Resolution (Fear)`**\n\n*   **1.0 Purpose:** To resolve the ongoing effects of a character encountering a source of Fear and the process of overcoming it.\n\n*   **2.0 Trigger:** A character encounters a creature or phenomenon with the `Fear (Rating)` trait. This SOP is initiated at the start of the character's next turn after the encounter begins.\n\n*   **3.0 Required Inputs:**\n    *   Character's Character Sheet (for Cool skill, Resolve points).\n    *   Source of Fear (for its `Fear Rating`).\n    *   Current Game State (to track the accumulated Success Level of the Extended Test).\n\n*   **4.0 Procedural Steps:**\n    1.  **Step 1: Validation & Player Intervention:**\n        *   Confirm the character is currently subject to a `Fear` effect and has not yet overcome it.\n        *   **Player Intervention Check:** Before proceeding, the GM must ask if the player wishes to spend one **Resolve Point** to ignore the effects of Psychology for this round. If they do, the character may act normally this turn, and this SOP terminates for this round. If not, proceed to Step 2.\n    2.  **Step 2: Extended Test Initiation (First Round Only):**\n        *   If this is the first round the character is attempting to overcome this specific `Fear` effect, announce that they must begin an **Extended Cool Test**.\n        *   **Target SL:** The target number of Success Levels required to pass the test is equal to the source's **Fear Rating**.\n        *   Generate an initial `Report: Psychology Test Outcome (WFRP)` to inform the player that the test has begun, what the target SL is, and what the immediate effects of Fear are.\n    3.  **Step 3: Apply Ongoing Effects:** For every round that the character has not yet accumulated the required SL, they are subject to Fear and suffer the following effects:\n        *   Suffer **-1 SL** on all Tests that directly affect the source of their Fear.\n        *   Cannot willingly move closer to the source of Fear unless they first pass a **Challenging (+0) Cool Test**.\n        *   If the source of Fear moves closer to them, they must immediately pass a **Challenging (+0) Cool Test** or gain 1 **`Broken`** Condition.\n    4.  **Step 4: Continue the Test (Action Phase):**\n        *   The character may use their Action to make a **Cool Test** to continue the Extended Test.\n        *   **Tool Call Example:** `print(RollTheDice(actor=\"[Character Name]\", action=\"Psychology Test\", target=\"[Source of Fear]\", type=\"Fear (Extended)\", formula=\"1d100\", reason=\"Attempting to overcome the Fear effect.\"))`\n        *   The SL from this roll is added to their running total for this Extended Test.\n    5.  **Step 5: Resolution Check:**\n        *   After the roll, check if the character's accumulated SL is **equal to or greater than** the Fear Rating.\n        *   **Success Path:** The character has overcome their Fear. The effects listed in Step 3 are removed for the remainder of the encounter. Generate a final `Report: Psychology Test Outcome (WFRP)` stating that the character has successfully overcome their fear. This SOP then terminates for this character.\n        *   **Ongoing Path:** If the accumulated SL is still less than the Fear Rating, the character remains subject to Fear. The process will repeat from Step 1 on their next turn.\n\n*   **5.0 Expected Outputs:**\n    *   An initial `Report: Psychology Test Outcome (WFRP)` to start the process.\n    *   Ongoing application of Fear penalties and checks as described in Step 3.\n    *   A final `Report: Psychology Test Outcome (WFRP)` upon successful completion of the Extended Test.\n\n*   **6.0 Cross-References:**\n    *   `Cheat Sheet: Psychology`\n    *   `Cheat Sheet: Conditions`\n    *   `Cheat Sheet: Core Tests`\n    *   `Cheat Sheet: Meta-Currencies`\n    *   `Report: Psychology Test Outcome (WFRP)`\n    *   `Tool: RollTheDice`\n",
            "constant": false,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": true,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 3,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 5,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 18,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "11": {
            "uid": 11,
            "key": [
                "SOP: Downtime Initiation"
            ],
            "keysecondary": [],
            "comment": "SOP-DOWNTIME-001: Downtime Initiation",
            "content": "### **SOP ID:** `SOP-DOWNTIME-001`\n### **Title:** `Standard Operating Procedure: Downtime Initiation`\n\n*   **1.0 Purpose:** To formally begin the downtime period by establishing its duration, resolving the mandatory random event, and generating the initial report that kicks off the Spending Phase.\n\n*   **2.0 Trigger:** The GM determines that an adventure has concluded and a significant period of time (at least one week) is about to pass.\n\n*   **3.0 Required Inputs:**\n    *   Character's Character Sheet (for current wealth, status, and any relevant conditions).\n    *   The narrative context (current location, reason for downtime).\n    *   `Guideline: Between Adventures (Downtime)` (specifically the Events Table).\n    *   `Tool: RollTheDice`.\n\n*   **4.0 Procedural Steps:**\n    1.  **Trigger Confirmation:** The GM announces that a period of downtime is beginning.\n    2.  **Establish Context:** The GM determines and provides the `Downtime Duration` in weeks and the `Reason` for the downtime. The number of `Available Endeavours` is calculated (1 per week, max 3).\n    3.  **Resolve Downtime Event:**\n        *   Call the `RollTheDice` tool to determine the event.\n        *   Consult the `Events Table` in the `Guideline: Between Adventures (Downtime)` using the result of the roll.\n        *   Determine the `Event Name` and its `Description & Effects`. Apply any immediate mechanical changes to the character's state (e.g., loss of money, gain of a condition).\n    4.  **Setup Spending Phase:**\n        *   Identify the character's `Current Location`.\n        *   Determine the `Market Availability` based on the location's size and nature.\n        *   Retrieve the character's `Current Wealth` from their character sheet.\n    5.  **Report Generation:** Consolidate all information gathered in steps 2, 3, and 4 to populate and generate the final `Report: Downtime Initiation`. This report is the sole output of this SOP.\n\n*   **5.0 Expected Outputs:**\n    *   A single, comprehensive `Report: Downtime Initiation`.\n    *   Any immediate updates to the character's sheet resulting from the random Downtime Event.\n\n*   **6.0 Cross-References:**\n    *   `Guideline: Between Adventures (Downtime)`\n    *   `Report: Downtime Initiation`\n    *   `Tool: RollTheDice`\n",
            "constant": false,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": true,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 3,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 0,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 23,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "12": {
            "uid": 12,
            "key": [
                "SOP: Endeavour Resolution",
                "Endeavour"
            ],
            "keysecondary": [
                "RollTheDice"
            ],
            "comment": "SOP-DOWNTIME-002: Endeavour Resolution",
            "content": "### **SOP ID:** `SOP-DOWNTIME-002`\n### **Title:** `Standard Operating Procedure: Endeavour Resolution`\n\n*   **1.0 Purpose:** To resolve a single chosen Endeavour, from the player's selection through to the final mechanical and narrative outcome.\n\n*   **2.0 Trigger:** The player selects a specific Endeavour to undertake from the list presented to them during the Endeavours Phase of Downtime.\n\n*   **3.0 Required Inputs:**\n    *   The name of the chosen Endeavour (e.g., \"Crafting\", \"Training\", \"Reputation\").\n    *   The character's full Character Sheet.\n    *   Any specific parameters required by the Endeavour (e.g., for \"Crafting\", the item to be made; for \"Training\", the skill to be learned).\n\n*   **4.0 Procedural Steps:**\n    1.  **Acknowledge Choice:** Confirm the selected Endeavour.\n    2.  **Execute Sub-Procedure:** Follow the specific rules for the chosen Endeavour as detailed in the `Guideline: Between Adventures (Downtime)`. This involves a unique sequence for each Endeavour.\n        *   **Universal Rule:** Any dice roll required by an Endeavour (e.g., for Crafting, Reputation, Unusual Learning) must be initiated with a standardized `RollTheDice` tool call. **The player must be offered the chance to use meta-currencies (e.g., Fortune) to influence the outcome of any failed test.**\n        *   **Example (Reputation):**\n            1.  Calculate the monetary cost based on the character's Status and potential income.\n            2.  Deduct the cost from the character's wealth.\n            3.  Initiate and resolve the required **Challenging (+0) Career Skill Test**.\n                *   **Tool Call Example:** `print(RollTheDice(actor=\"[Character Name]\", action=\"Endeavour Test\", target=None, type=\"Reputation\", formula=\"1d100\", reason=\"Attempting to improve social standing.\"))`\n            4.  If the test fails, offer the player the chance to spend a **Fortune Point** to reroll.\n            5.  Apply the temporary +1 or -1 modifier to the character's Standing based on the final result.\n            6.  Formulate a narrative of the character's social climbing (or fumbling).\n    3.  **Report Generation:** Consolidate all mechanical results (XP spent, money changed, skills advanced, items gained, etc.) and the narrative summary into a single, comprehensive `Report: Endeavour Outcome`.\n\n*   **5.0 Expected Outputs:**\n    *   A single `Report: Endeavour Outcome`.\n    *   An updated Character Sheet reflecting all changes from the Endeavour.\n\n*   **6.0 Cross-References:**\n    *   `Guideline: Between Adventures (Downtime)`\n    *   `Cheat Sheet: Core Tests`\n    *   `Cheat Sheet: Meta-Currencies`\n    *   `Report: Endeavour Outcome`\n    *   `Tool: RollTheDice`\n",
            "constant": false,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": true,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 3,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 10,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 24,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "13": {
            "uid": 13,
            "key": [
                "SOP: Downtime Conclusion",
                "Endeavour"
            ],
            "keysecondary": [
                "RollTheDice"
            ],
            "comment": "SOP-DOWNTIME-003: Downtime Conclusion",
            "content": "### **SOP ID:** `SOP-DOWNTIME-003`\n**Title:** `Standard Operating Procedure: Downtime Conclusion`\n\n*   **1.0 Purpose:** To formally end the downtime period by resolving the \"Money to Burn\" rule, applying any new income, and summarizing all changes before transitioning back to narrative play.\n\n*   **2.0 Trigger:** The character has completed all of their available Endeavours for the current downtime period.\n\n*   **3.0 Required Inputs:**\n    *   Character's Character Sheet (for current wealth, all changes from Endeavours).\n    *   A log of all Endeavours performed during the downtime.\n    *   The specific amount of money generated by any `Income` Endeavour.\n\n*   **4.0 Procedural Steps:**\n    1.  **Trigger Confirmation:** The system confirms that all Endeavours for the period have been resolved.\n    2.  **Resolve \"Money to Burn\" Rule:**\n        *   Identify the character's current, unbanked wealth from the previous adventure.\n        *   Set this wealth to zero.\n        *   Provide a narrative prompt for the player to describe how these funds were lost (e.g., \"You are prompted to narrate how your remaining 12 Silver Shillings vanished. Was it through lavish spending, a donation to the temple of Sigmar, or a particularly unlucky night of gambling?\").\n    3.  **Apply New Income:**\n        *   Check if the `Income` Endeavour was successfully performed during this downtime.\n        *   If YES, add the money earned from that Endeavour to the character's wealth. This becomes their starting money for the next adventure.\n        *   If NO, the character begins the next adventure with no money (unless they successfully withdrew funds from a bank).\n    4.  **Generate Final Summary:** The system reviews all changes that occurred during the entire downtime period (from the initial Event to the final Endeavour).\n    5.  **Report Generation:** Consolidate all information into a single, comprehensive `Report: Downtime Conclusion`. This report will list all significant changes (XP spent, skills gained, items acquired, final wealth, etc.).\n    6.  **State Transition:** After presenting the report, the GM will formally transition the game back into **Narrative Mode** to begin the next adventure.\n\n*   **5.0 Expected Outputs:**\n    *   A single `Report: Downtime Conclusion`.\n    *   An updated Character Sheet reflecting the character's final state after downtime.\n    *   A return to the Narrative Mode game state.\n\n*   **6.0 Cross-References:**\n    *   `Guideline: Between Adventures (Downtime)`\n    *   `Report: Downtime Conclusion`\n",
            "constant": false,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": true,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 3,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 10,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 25,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "14": {
            "uid": 14,
            "key": [
                "SOP: Travel Resolution",
                "travel",
                "daily summary"
            ],
            "keysecondary": [],
            "comment": "SOP-TRAVEL-001: Travel Resolution",
            "content": "### **SOP-TRAVEL-001: Standard Operating Procedure: Travel Resolution**\n\n*   **1.0 Purpose:** To resolve a single day of travel, calculating distance covered, handling potential fatigue, and triggering random events.\n\n*   **2.0 Trigger:** The player declares their intention to travel for a day or a significant portion thereof.\n\n*   **3.0 Required Inputs:**\n    *   Character's Character Sheet (for Movement, Endurance, current Conditions).\n    *   Party's travel method (e.g., on foot, mounted, by coach).\n    *   Declared hours of travel for the day.\n    *   `Guideline: Travel & Encounters`\n    *   `Reference: Travel Events Table`\n    *   `Tool: RollTheDice`\n\n*   **4.0 Procedural Steps:**\n    1.  **Declare Intent:** The player states their destination and how many hours they intend to travel.\n    2.  **Calculate Distance:** Determine the total distance covered for the day based on the party's slowest travel speed and the hours travelled.\n    3.  **Resolve Forced March (Conditional):**\n        *   If `Hours Travelled > 8`, each character participating must make an **Endurance Test**.\n        *   The difficulty is typically **Challenging (+0)** but may be modified by terrain or weather.\n        *   **Player Intervention Check:** If a character fails the test, before applying the consequence, the GM must ask if they wish to spend one **Fortune Point** to reroll.\n        *   Characters who fail the final test result gain one **`Fatigued`** Condition.\n    4.  **Resolve Travel Event:**\n        *   The GM determines if a travel event occurs (e.g., by rolling 1d10 and triggering on an 8, or by narrative decision).\n        *   If an event is triggered, call the `RollTheDice` tool.\n        *   **Tool Call Example:** `print(RollTheDice(actor=\"GM\", action=\"Travel Event Roll\", target=None, type=\"[Region Name]\", formula=\"1d10\", reason=\"Determining the day's travel event.\"))`\n        *   Consult the `Reference: Travel Events Table` with the result.\n        *   Resolve the event as described. This may involve a simple narrative, a skill test, or initiating combat via `SOP-COMBAT-003`.\n    5.  **Report Generation:** Consolidate all outcomes for the day (distance travelled, Conditions gained, event summary) into a single `Report: Daily Travel Summary`.\n\n*   **5.0 Expected Outputs:**\n    *   A `Report: Daily Travel Summary` detailing the day's journey.\n    *   Updated character states (e.g., new `Fatigued` Conditions).\n    *   Potential transition to another game state (e.g., Combat Mode) if triggered by an event.\n\n*   **6.0 Cross-References:**\n    *   `Guideline: Travel & Encounters`\n    *   `Reference: Travel Events Table`\n    *   `SOP-COMBAT-003: Combat Initiation`\n    *   `Cheat Sheet: Conditions`\n    *   `Cheat Sheet: Core Tests`\n    *   `Cheat Sheet: Meta-Currencies`\n    *   `Tool: RollTheDice`\n",
            "constant": false,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": true,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 3,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 10,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 22,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "15": {
            "uid": 15,
            "key": [
                "SOP: Critical Wound Resolution",
                "11",
                "22",
                "33",
                "44",
                "55",
                "66",
                "77",
                "88",
                "99",
                "00",
                "01",
                "02",
                "03",
                "04",
                "05",
                "Critical Wound"
            ],
            "keysecondary": [
                "RollTheDice"
            ],
            "comment": "SOP-INJURY-001: Critical Wound Resolution",
            "content": "### **SOP-INJURY-001: Critical Wound Resolution**\n\n*   **1.0 Purpose:** To determine and apply the specific effects of a Critical Wound after it has been triggered. This SOP acts as a sub-routine for attack resolution procedures and is responsible for resolving **all immediate consequences** of the injury.\n\n*   **2.0 Trigger:** A character is confirmed to have suffered a Critical Wound during the resolution of an attack (e.g., via `SOP-COMBAT-001` or `SOP-COMBAT-002`).\n\n*   **3.0 Required Inputs:**\n    *   The determined Hit Location (Head, Body, Arm, Leg).\n    *   The target's Character Sheet.\n    *   The relevant Critical Wound Table for the Hit Location.\n    *   `Tool: RollTheDice`.\n\n*   **4.0 Procedural Steps:**\n    1.  **Validation:** Confirm that a Critical Wound has been triggered and identify the correct Critical Wound Table.\n    2.  **Initiate Roll:** Call the `RollTheDice` tool to determine the outcome on the relevant table.\n    3.  **Determine Outcome:** Look up the final roll on the appropriate Critical Wound Table to find the specific injury.\n    4.  **Parse & Apply Immediate Effects:** The system will parse the injury's description for immediate, unconditional effects.\n        *   Apply any specified Wound loss.\n        *   Apply any specified Conditions (e.g., `Bleeding`, `Stunned`, `Prone`) directly to the target's active state.\n    5.  **Resolve Consequential Tests:** The system will scan the injury's description for any mandatory follow-up tests (e.g., \"Pass a Hard (–20) Endurance Test or gain the Unconscious Condition\").\n        *   If a test is required, the system immediately calls the `RollTheDice` tool for the target to resolve it.\n        *   The outcome of this secondary test is determined, and any further Conditions or effects are applied to the target's active state.\n    6.  **Return Results:** Pass all consolidated data—the name of the Critical Wound, all Conditions applied, the results of any consequential tests, and any lasting injuries—back to the calling procedure.\n\n*   **5.0 Expected Outputs:**\n    *   A comprehensive data packet of all mechanical effects resulting from the Critical Wound, which is then used to populate the final `Report: Action Resolution Outcome (WFRP)`.\n\n*   **6.0 Cross-References:**\n    *   `SOP-COMBAT-001: Melee Attack Action`\n    *   `SOP-COMBAT-002: Ranged Attack Action`\n    *   `Cheat Sheet: Injury & Healing`\n    *   All Critical Wound Tables\n    *   `Tool: RollTheDice`\n\n---\n\n",
            "constant": false,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": true,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 3,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 5,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 13,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "16": {
            "uid": 16,
            "key": [
                "SOP: Corruption Test",
                "Corruption"
            ],
            "keysecondary": [
                "RollTheDice"
            ],
            "comment": "SOP-AFFLICT-001: Corruption Test",
            "content": "### **`SOP-AFFLICT-001: Standard Operating Procedure: Corruption Test`**\n\n*   **1.0 Purpose:** To resolve the test made when a character is exposed to a Corrupting Influence, determining the number of Corruption Points gained.\n\n*   **2.0 Trigger:** A character encounters a source of corruption (e.g., witnesses a daemon, handles a warpstone artefact, makes a dark pact).\n\n*   **3.0 Required Inputs:**\n    *   Character's Character Sheet (for Endurance, Cool, Willpower Bonus, Toughness Bonus, current Corruption Points).\n    *   The severity of the exposure (Minor, Moderate, or Major), as determined by the GM.\n    *   `Cheat Sheet: Corruption`.\n    *   `Tool: RollTheDice`.\n\n*   **4.0 Procedural Steps:**\n    1.  **Step 1: Validation & Setup:**\n        *   Confirm the trigger and the GM-determined exposure level (Minor, Moderate, or Major).\n        *   The character must choose to resist with either an **Endurance Test** or a **Cool Test**. The default difficulty is **Challenging (+0)**.\n    2.  **Step 2: Test Initiation:**\n        *   Call the `RollTheDice` tool with the appropriate parameters.\n        *   **Tool Call Example:** `print(RollTheDice(actor=\"[Character Name]\", action=\"Corruption Test\", target=None, type=\"[Endurance/Cool] vs [Minor/Moderate/Major] Exposure\", formula=\"1d100\", reason=\"Resisting the corrupting influence of [Source].\"))`\n    3.  **Step 3: Test Resolution & Player Intervention:**\n        *   Resolve the chosen test according to `Cheat Sheet: Core Tests` to determine the final Success Level (SL).\n        *   **If the test fails:** Before proceeding, the GM must ask if the player wishes to spend one **Fortune Point** to reroll the test. If so, return to Step 2 and re-evaluate the outcome.\n    4.  **Step 4: Corruption Point Adjudication:** Apply Corruption Points based on the exposure level and the final test result, following the rules in `Cheat Sheet: Corruption`.\n        *   **Minor Exposure:** Gain 1 point on failure.\n        *   **Moderate Exposure:** Gain 2 points on failure, 1 point on a marginal success (0-1 SL).\n        *   **Major Exposure:** Gain 3 points on failure, 2 points on marginal success (0-1 SL), 1 point on a standard success (2-3 SL).\n    5.  **Step 5: Mutation Check Trigger:**\n        *   After applying any new Corruption Points, check if the character's new total `Corruption Points > (Willpower Bonus + Toughness Bonus)`.\n        *   If YES, the character must immediately make a **Test of Corruption** as described in `Cheat Sheet: Corruption`. This may result in a mutation.\n    6.  **Step 6: Report Generation:** Consolidate all outcomes (Corruption Points gained, any triggered Mutation Checks, narrative description of the character's struggle) into a single, comprehensive report.\n\n*   **5.0 Expected Outputs:**\n    *   An updated Corruption Point total on the Character Sheet.\n    *   A report detailing the outcome of the test.\n    *   A potential trigger for the mutation process.\n\n*   **6.0 Cross-References:**\n    *   `Cheat Sheet: Corruption`\n    *   `Cheat Sheet: Core Tests`\n    *   `Cheat Sheet: Meta-Currencies`\n    *   `Report: Action Resolution Outcome (WFRP)`\n",
            "constant": false,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": true,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 3,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 5,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 14,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "17": {
            "uid": 17,
            "key": [
                "SOP: Disease Contraction Test",
                "Disease"
            ],
            "keysecondary": [
                "RollTheDice"
            ],
            "comment": "SOP-AFFLICT-002: Disease Contraction Test",
            "content": "### **`SOP-AFFLICT-002: Standard Operating Procedure: Disease Contraction Test`**\n\n*   **1.0 Purpose:** To resolve the test made when a character is exposed to a source of disease, determining if they become infected.\n\n*   **2.0 Trigger:** A character is exposed to a potential source of disease (e.g., wounded by a plague-bearer, drinks contaminated water, enters a quarantined zone).\n\n*   **3.0 Required Inputs:**\n    *   Character's Character Sheet (for the relevant Characteristic, typically Endurance or Toughness).\n    *   The specific disease being resisted (for its Contraction Test difficulty and Incubation period).\n    *   `Cheat Sheet: Disease & Infection`.\n    *   `Tool: RollTheDice`.\n\n*   **4.0 Procedural Steps:**\n    1.  **Step 1: Validation & Setup:**\n        *   Confirm the trigger and identify the specific disease the character was exposed to.\n        *   Look up the disease's **Contraction** requirement in the `Cheat Sheet: Disease & Infection` to determine the required Test and its Difficulty (e.g., \"Average Endurance\").\n    2.  **Step 2: Test Initiation:**\n        *   Call the `RollTheDice` tool with the appropriate parameters.\n        *   **Tool Call Example:** `print(RollTheDice(actor=\"[Character Name]\", action=\"Disease Contraction Test\", target=None, type=\"[Endurance/Toughness] vs [Disease Name]\", formula=\"1d100\", reason=\"Resisting exposure to [Disease Name].\"))`\n    3.  **Step 3: Test Resolution & Player Intervention:**\n        *   Resolve the chosen test according to `Cheat Sheet: Core Tests`.\n        *   **If the test fails:** Before proceeding, the GM must ask if the player wishes to spend one **Fortune Point** to reroll the test. If so, return to Step 2 and re-evaluate the outcome.\n    4.  **Step 4: Outcome Adjudication:**\n        *   **Success Path:** If the final test result is a success, the character's constitution fights off the illness. They do not get sick. Generate a report stating that the character has successfully resisted the disease. This SOP terminates.\n        *   **Failure Path:** If the final test result is a failure, the character is infected with the disease. Note the disease's **Incubation** period (e.g., \"1d10 days\"). The character will not show any symptoms until this period has passed. Generate a report stating that the character has contracted the disease and noting the incubation time.\n\n*   **5.0 Expected Outputs:**\n    *   A report detailing the outcome of the test (resisted or contracted).\n    *   If contracted, a new status flag on the character sheet indicating the specific disease and the remaining incubation time.\n\n*   **6.0 Cross-References:**\n    *   `Cheat Sheet: Disease & Infection`\n    *   `Cheat Sheet: Core Tests`\n    *   `Cheat Sheet: Meta-Currencies`\n",
            "constant": false,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": true,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 3,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 5,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 15,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "18": {
            "uid": 18,
            "key": [
                "SOP: Character Creation Process",
                "character creation",
                "chargen"
            ],
            "keysecondary": [
                "RollTheDice"
            ],
            "comment": "SOP-CHARGEN-001: Character Creation Process",
            "content": "### **SOP ID:** `SOP-CHARGEN-001`\n### **Title:** `Standard Operating Procedure: Character Creation Process`\n\n*   **1.0 Purpose:** To provide a structured, interactive procedure for guiding a player through the complete character creation process, resulting in a finalized character sheet and dossier.\n\n*   **2.0 Trigger:** A player indicates their desire to create a new character.\n\n*   **3.0 Required Inputs:**\n    *   Player choices and narrative input.\n    *   `Guideline: WFRP 4e Character Creation`.\n    *   All relevant `Reference` documents from the `Character Creation Data` index.\n    *   `Tool: RollTheDice`.\n\n*   **4.0 Procedural Steps:**\n    1.  **Initiation & Setup:** Announce the start of the process. Initialize a temporary character sheet and an XP bonus tracker at 0.\n    2.  **Resolve Core Concept (Steps 1-2):**\n        *   Guide the player through **Step 1: Species**, presenting choices and resolving random rolls per the `Guideline`. Update the XP tracker if a bonus is earned.\n        *   Guide the player through **Step 2: Class and Career**, presenting choices and resolving random rolls per the `Guideline`. Update the XP tracker.\n        *   Record the final Species, Class, and Career.\n    3.  **Resolve Attributes (Step 3):**\n        *   Guide the player through determining their ten **Characteristics**, presenting choices and resolving random rolls. Update the XP tracker.\n            *   **Tool Call Example (for random roll):** `print(RollTheDice(actor=\"GM\", action=\"Character Creation\", target=\"[Character Name]\", type=\"Attribute Roll\", formula=\"2d10\", reason=\"Rolling for Weapon Skill characteristic.\"))`\n        *   Calculate and record all derived attributes (**Wounds, Fate, Resilience, Movement**), prompting for Extra Point allocation.\n        *   Prompt for and record the character's **Motivation**.\n        *   Prompt for and record the **5 initial career advances**.\n    4.  **Resolve Skills & Talents (Step 4):**\n        *   Guide the player through selecting their **Species Skills & Talents**.\n        *   Guide the player through selecting their **Career Skills & Talents**.\n        *   Record all choices and advances.\n    5.  **Resolve Trappings & Wealth (Step 5):**\n        *   Determine and record all **Class and Career Trappings**.\n        *   Calculate and record starting **Wealth** based on Status.\n    6.  **Resolve Narrative Identity (Steps 6-7):**\n        *   Prompt for and record the character's **Name**.\n        *   Prompt for and record personal **Short-Term and Long-Term Ambitions**.\n        *   Prompt for and record party **Short-Term and Long-Term Ambitions** (if applicable).\n    7.  **Synthesize Backstory (Step 8):**\n        *   Present the \"Ten Questions\" to the player.\n        *   Based on the player's answers, generate the `Report: Character Dossier`.\n    8.  **Resolve Initial Advancement (Step 9):**\n        *   Tally and present the total bonus XP earned.\n        *   Prompt the player to spend the XP on their starting career options, referencing `Reference: Advancement (WFRP 4e)` for costs.\n        *   Update the character sheet with any purchased advances.\n    9.  **Finalization & Reporting:**\n        *   Generate and present the final, complete `Report: Character Sheet (WFRP)`.\n        *   Present the final `Report: Character Dossier`.\n        *   Confirm the character is ready for play. This SOP terminates.\n\n*   **5.0 Expected Outputs:**\n    *   A complete `Report: Character Sheet (WFRP)`.\n    *   A complete `Report: Character Dossier`.\n    *   A new, playable character integrated into the game state.\n\n*   **6.0 Cross-References:**\n    *   `Guideline: WFRP 4e Character Creation`\n    *   `Reference: Careers (WFRP 4e)`\n    *   `Reference: Skills and Talents (WFRP 4e)`\n    *   `Reference: Trappings (WFRP 4e)`\n    *   `Reference: Advancement (WFRP 4e)`\n    *   All Species `Reference` documents.\n    *   `Report: Character Sheet (WFRP)`\n    *   `Report: Character Dossier`\n    *   `Tool: RollTheDice`\n",
            "constant": false,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": true,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 3,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 25,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 27,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "19": {
            "uid": 19,
            "key": [
                "SOP: Extended Test Resolution"
            ],
            "keysecondary": [],
            "comment": "SOP-NARRATIVE-002 : Extended Test Resolution, Extended Test ",
            "content": "### **`SOP-NARRATIVE-002: Standard Operating Procedure: Extended Test Resolution`**\n\n*   **1.0 Purpose:** To define the complete, end-to-end procedure for managing a complex task that requires a sequence of rolls over time to resolve.\n\n*   **2.0 Trigger:** The GM determines that a player's declared action warrants an Extended Test.\n\n*   **3.0 Procedural Steps:**\n\n    1.  **Step 1: Initiation**\n        *   The GM determines the parameters of the test: the required Skill/Characteristic, the Target Success Level (SL), the interval each roll represents, any limits on attempts, and the consequences of failure.\n        *   The GM generates and posts a `Report: Extended Test Initiation`. This occurs only once per Extended Test.\n\n    2.  **Step 2: Test Loop (This section repeats)**\n        *   **A. Declaration:** The player declares their intent to make an attempt, committing the time and resources defined in the Test Interval.\n        *   **B. Test Initiation:** The GM calls the `RollTheDice` tool to resolve the attempt.\n        *   **C. `[REVISED]` Player Intervention Window:** After posting the `Report: Action Resolution Outcome`, the GM will add the standard **Intervention Cue (⏳)**. This opens a brief window for the player to spend a meta-currency (e.g., a Fortune Point to reroll a failure or add +1 SL). The GM will pause and await the player's response. If the player chooses to intervene, the outcome is re-evaluated. If the player proceeds with their next action, the original outcome is locked in.\n        *   **D. Update Report:** The GM determines the outcome of the roll (SL gained, consequences triggered, etc.) and generates and posts a `Report: Extended Test Update`.\n\n    3.  **Step 3: Conclusion Check**\n        *   After posting the update, the GM checks the \"Current Progress\" section of the report.\n        *   **If the test is complete** (Target SL is met or exceeded, or the attempt limit is reached): The GM proceeds to Step 4.\n        *   **If the test is not complete:** The GM returns to Step 2 and awaits the player's declaration for the next attempt.\n\n    4.  **Step 4: Termination**\n        *   The GM generates a final `Report: Extended Test Conclusion` that summarizes the overall outcome of the completed task. The narrative within this report serves as the transition back to standard gameplay.\n        *   This SOP terminates.\n\n*   **4.0 Cross-References:**\n    *   `Tool: RollTheDice`\n    *   `Report: Extended Test Initiation`\n    *   `Report: Extended Test Update`\n    *   `Report: Extended Test Conclusion`\n    *   `Cheat Sheet: Core Tests`\n    *   `Cheat Sheet: Meta-Currencies`\n",
            "constant": false,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": true,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 3,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 0,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 21,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "20": {
            "uid": 20,
            "key": [
                "all manifests",
                "all indexes"
            ],
            "keysecondary": [],
            "comment": "Manifest - Standard Operating Procedures (SOP)",
            "content": "***\n\n### **Standard Operating Procedures (SOP) Manifest**\n\nThis document indexes all defined procedural workflows for the game. Each SOP dictates the sequence of events, required inputs, and expected outputs for a specific game state or action.\n\n#### **1. Combat Operations (`SOP-COMBAT`)**\n*Procedures governing the initiation, execution, and resolution of combat encounters.*\n\n*   **`SOP-COMBAT-000: Combat Encounter Resolution`**: The master procedure for managing an entire combat encounter, from initiation to conclusion. It calls all other combat SOPs as sub-routines.\n*   **`SOP-COMBAT-001: Melee Attack Action`**: Resolves a single melee attack, including the opposed test, damage calculation, and critical hit adjudication.\n*   **`SOP-COMBAT-002: Ranged Attack Action`**: Resolves a single ranged attack, including the test, hit location, damage, and critical/fumble effects.\n*   **`SOP-COMBAT-003: Combat Initiation`**: Manages the transition from narrative to combat mode, determining surprise and initiative order.\n*   **`SOP-COMBAT-004: Charge Action`**: Resolves the specific action of charging an opponent, which combines movement with a mandatory melee attack.\n\n#### **2. Magic & Faith Operations (`SOP-MAGIC`)**\n*Procedures for casting spells, invoking divine power, and interacting with magical effects.*\n\n*   **`SOP-MAGIC-001: Spellcasting Action`**: Resolves a spellcasting attempt, handling channelling, the casting test, and potential miscasts.\n*   **`SOP-MAGIC-002: Prayer Action`**: Resolves a prayer attempt, determining success, failure, and the potential for invoking divine favour or wrath.\n*   **`SOP-MAGIC-003: Dispelling a Spell`**: Defines the process for negating an incoming spell or dismantling a persistent magical effect.\n\n#### **3. Character State & Afflictions (`SOP-AFFLICT`, `SOP-INJURY`, `SOP-PSYCH`)**\n*Procedures for handling changes to a character's physical and mental state due to external forces.*\n\n*   **`SOP-INJURY-001: Critical Wound Resolution`**: Determines the specific effects of a Critical Wound by rolling on the appropriate location table.\n*   **`SOP-AFFLICT-001: Corruption Test`**: Resolves a test to resist gaining Corruption Points after exposure to a corrupting influence.\n*   **`SOP-AFFLICT-002: Disease Contraction Test`**: Resolves the test to see if a character becomes infected after being exposed to a disease.\n*   **`SOP-PSYCH-001: Psychology Test Resolution (Terror)`**: Manages the one-time test a character makes when first encountering a source of `Terror`.\n*   **`SOP-PSYCH-002: Psychology Test Resolution (Fear)`**: Manages the ongoing Extended Test required to overcome the effects of a `Fear`-causing entity.\n\n#### **4. Narrative & Downtime Operations (`SOP-NARRATIVE`, `SOP-DOWNTIME`, `SOP-TRAVEL`)**\n*Procedures that govern gameplay outside of structured combat, including story progression, travel, and activities between adventures.*\n\n*   **`SOP-NARRATIVE-001: Narrative Action Resolution`**: The core procedure for resolving any non-combat, non-downtime action, determining if a test is needed and what kind.\n*   **`SOP-NARRATIVE-002: Extended Test Resolution`**: Defines the master loop for resolving a complex task that requires multiple rolls over time.\n*   **`SOP-TRAVEL-001: Travel Resolution`**: Resolves a single day of travel, calculating distance, checking for fatigue, and triggering random events.\n*   **`SOP-DOWNTIME-001: Downtime Initiation`**: Begins the downtime phase, determining its duration and resolving the initial random event.\n*   **`SOP-DOWNTIME-002: Endeavour Resolution`**: Resolves a single chosen downtime activity (e.g., Training, Crafting).\n*   **`SOP-DOWNTIME-003: Downtime Conclusion`**: Formally ends the downtime period, resolving final finances and summarizing all changes.\n\n#### **5. Character Management (`SOP-CHARGEN`)**\n*The foundational procedure for creating a new character from start to finish.*\n\n*   **`SOP-CHARGEN-001: Character Creation Process`**: A comprehensive, step-by-step guide for the entire character creation process, from selecting a species to spending initial XP.\n\n***\n",
            "constant": true,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": true,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 3,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 0,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 0,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "21": {
            "uid": 21,
            "key": [],
            "keysecondary": [],
            "comment": "Combat Operations (SOP-COMBAT)",
            "content": "",
            "constant": true,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 0,
            "disable": true,
            "excludeRecursion": false,
            "preventRecursion": false,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 0,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": null,
            "sticky": 0,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 2,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "22": {
            "uid": 22,
            "key": [],
            "keysecondary": [],
            "comment": "Magic & Faith Operations (SOP-MAGIC)",
            "content": "",
            "constant": true,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 0,
            "disable": true,
            "excludeRecursion": false,
            "preventRecursion": false,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 0,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": null,
            "sticky": 0,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 8,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "23": {
            "uid": 23,
            "key": [],
            "keysecondary": [],
            "comment": " Character State & Afflictions (SOP-AFFLICT, SOP-INJURY, SOP-PSYCH)",
            "content": "",
            "constant": true,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 0,
            "disable": true,
            "excludeRecursion": false,
            "preventRecursion": false,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 0,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": null,
            "sticky": 0,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 12,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "24": {
            "uid": 24,
            "key": [],
            "keysecondary": [],
            "comment": "Narrative & Downtime Operations (SOP-NARRATIVE, SOP-DOWNTIME, SOP-TRAVEL)",
            "content": "",
            "constant": true,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 0,
            "disable": true,
            "excludeRecursion": false,
            "preventRecursion": false,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 0,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": null,
            "sticky": 0,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 19,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "25": {
            "uid": 25,
            "key": [],
            "keysecondary": [],
            "comment": "Character Management (SOP-CHARGEN)",
            "content": "",
            "constant": true,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 0,
            "disable": true,
            "excludeRecursion": false,
            "preventRecursion": false,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 0,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": null,
            "sticky": 0,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 26,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "26": {
            "uid": 26,
            "key": [],
            "keysecondary": [],
            "comment": "SOP-CORE-001: Opposed Test Resolution",
            "content": "### **`SOP-CORE-001: Opposed Test Resolution`**\n\n*   **1.0 Purpose:** To provide a single, universal procedure for resolving any Opposed Test. This SOP manages the dice rolls, determines the winner, and handles the resolution of any simultaneous special results (Criticals/Fumbles) by initiating the required secondary rolls. It is the foundational block for all opposed actions.\n\n*   **2.0 Trigger:** Executed by any higher-level SOP (e.g., `SOP-COMBAT-001`) when an action requires an Opposed Test.\n\n*   **3.0 Procedural Steps:**\n    1.  **Initiate Opposed Test:** The system determines the final target numbers for both actors and calls the `RollTheDice` tool for both simultaneously.\n    2.  **Determine Contest Winner & Special Triggers:** The system compares the results to determine the winner based on Success Levels and checks both rolls for any triggered Criticals or Fumbles.\n    3.  **Resolve Special Outcomes (Internal Sub-Routine):** The system follows the priority rules from `Cheat Sheet: Core Tests > Section IV`. If any secondary rolls are required, they are performed now.\n        *   **A. Fumble Resolution:** If a Fumble is triggered, the system calls the `RollTheDice` tool for a 1d100 roll on the `fumble_table.json`. The result is recorded.\n        *   **B. Critical Confirmation:** If a winning Critical is triggered, the system records that a Critical occurred. It does *not* resolve the specific wound; it only confirms the event.\n        *   **C. Simultaneous Results:** If both actors trigger a special result, the system resolves them according to the priority rules (e.g., for \"Critical vs. Fumble,\" it performs both the Fumble roll and records that a Critical occurred).\n    4.  **Consolidate & Return Results:** The system packages all raw mechanical data from the test into a single data object (including the winner, SL difference, Fumble results, and Critical confirmation) and passes it back to the calling SOP. This SOP terminates.\n\n*   **5.0 Expected Outputs:**\n    *   A data object containing the complete, raw results of the Opposed Test, ready for interpretation by the calling procedure.\n",
            "constant": false,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": true,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 3,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 0,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 1,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        },
        "27": {
            "uid": 27,
            "key": [
                "SOP: Prayer Action",
                "prayer"
            ],
            "keysecondary": [
                "RollTheDice"
            ],
            "comment": "SOP-PSYCH-000: Simple Psychology Test Resolution",
            "content": "### **`SOP-PSYCH-000: Simple Psychology Test Resolution`**\n\n*   **1.0 Purpose:** To resolve a single, non-extended Psychology test such as `Afraid`, `Animosity`, or `Hatred`. This SOP ensures that the correct tool is used for the roll.\n\n*   **2.0 Trigger:** A character with a relevant psychological trait encounters its trigger during the `Opening Phase` of combat.\n\n*   **3.0 Required Inputs:**\n    *   The character performing the test (e.g., \"Goblin 1\").\n    *   The character's relevant Characteristic/Skill rating (e.g., Cool 25).\n    *   The trait being tested (e.g., \"Afraid (Elves)\").\n    *   `Tool: RollTheDice`.\n\n*   **4.0 Procedural Steps:**\n    1.  **Identify Test:** State the character and the test being made (e.g., \"Goblin 1 must make a Cool Test due to its `Afraid (Elves)` trait.\").\n    2.  **Determine Parameters:** Identify the base `rating` for the test and any `applied_modifiers`.\n    3.  **Execute Tool Call:** The GM must now make a formal call to the `RollTheDice` tool. The `actor` object for the call must be structured according to the `Guideline: RollTheDice Tool Usage`, with an `action_type` of \"Psychology Test\".\n    4.  **Determine Outcome:** Based on the success or failure of the roll, determine the mechanical and narrative outcome as defined in the `Cheat Sheet: Psychology`.\n    5.  **Return Result:** Pass the outcome (e.g., \"Failure, -2 SL. Goblin 1 gains 1 Broken Condition.\") back to the `Opening Phase` resolution step to be included in the final report.\n\n*   **5.0 Expected Outputs:**\n    *   A verifiable dice roll from the `RollTheDice` tool.\n    *   A clear mechanical outcome to be included in the `Report: Combat - Opening Phase`.\n\n*   **6.0 Cross-References:**\n    *   `SOP-COMBAT-000: Combat Encounter Resolution`\n    *   `Cheat Sheet: Psychology`\n    *   `Tool: RollTheDice`\n    *   `Guideline: RollTheDice Tool Usage`\n",
            "constant": false,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": true,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 3,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 5,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 16,
            "characterFilter": {
                "isExclude": false,
                "names": [],
                "tags": []
            }
        }
    }
}